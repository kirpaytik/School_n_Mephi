#include <iostream>
using namespace std;

int main()
{
    short int n,c;
    cin>>n;
    int b[10][10]= {{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};
    
    if(n%2==0)          // заполнение по горизонтали
    {
        if(n/2==0)          // начало в левом верхнем углу
        {
            b[0][0]=0;
            int i=0;
            int j=1;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(j<10){b[i][j]=c; c=c+1; j=j+1;}
                i=i+1;
                while(j>0){b[i][j-1]=c; c=c+1; j=j-1;}
                i=i+1;
            }
        }
        if(n/2==1)          // начало в правом верхнем углу
        {
            b[0][9]=0;
            int i=0;
            int j=9;
            c=1;
            for(int g; g<5; g=g+1)
            {
                while(j>0){b[i][j-1]=c; c=c+1; j=j-1;}
                i=i+1;
                while(j<10){b[i][j]=c; c=c+1; j=j+1;}
                i=i+1;
            }
        }
        if(n/2==2)          // начало в левом нижнем углу
        {
            b[9][0]=0;
            int i=9;
            int j=1;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(j<10){b[i][j]=c; c=c+1; j=j+1;}
                i=i-1;
                while(j>0){b[i][j-1]=c; c=c+1; j=j-1;}
                i=i-1;
            }
        }
        if(n/2==3)          // начало в правом нижнем углу
        {
            b[9][9]=0;
            int i=9;
            int j=9;
            c=1;
            for(int g; g<5; g=g+1)
            {
                while(j>0){b[i][j-1]=c; c=c+1;j=j-1; }
                i=i-1;
                while(j<10){b[i][j]=c; c=c+1; j=j+1;}
                i=i-1;
            }
        }
    }
    
    if(n%2==1)          //заполнение по вертикали
    {
        if(n/2==0)          // начало в левом верхнем углу
        {
            b[0][0]=0;
            int i=1;
            int j=0;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(i<10){b[i][j]=c; c=c+1; i=i+1;}
                j=j+1;
                while(i>0){b[i-1][j]=c; c=c+1; i=i-1;}
                j=j+1;
            }
        }
        if(n/2==1)          // начало в правом верхнем углу
        {
            b[0][9]=0;
            int i=1;
            int j=9;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(i<10){b[i][j]=c; c=c+1; i=i+1;}
                j=j-1;
                while(i>0){b[i-1][j]=c; c=c+1; i=i-1;}
                j=j-1;
            }
        }
        if(n/2==2)          // начало в левом нижнем углу
        {
            b[9][0]=0;
            int i=9;
            int j=0;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(i>0){b[i-1][j]=c; c=c+1; i=i-1;}
                j=j+1;
                while(i<10){b[i][j]=c; c=c+1; i=i+1;}
                j=j+1;
            }
        }
        if(n/2==3)          // начало в правом нижнем углу
        {
            b[9][9]=0;
            int i=9;
            int j=9;
            c=1;
            for(int g=0; g<5; g=g+1)
            {
                while(i>0){b[i-1][j]=c; c=c+1; i=i-1;}
                j=j-1;
                while(i<10){b[i][j]=c; c=c+1; i=i+1;}
                j=j-1;
            }
        }
    }
    
    for (int t = 0; t < 10; t++)
    {
        for (int d = 0; d < 10; d++)
            cout<<b[t][d]<<" ";
        cout<<"\n";
    }
    return 0;
}

        -:    0:Source:../cpp/Lair.cpp
        -:    0:Graph:Lair.gcno
        -:    0:Data:Lair.gcda
        -:    0:Runs:1
        -:    1:#include "../hpp/Lair.hpp"
        -:    2:
        -:    3:#include "../hpp/Enemy.hpp"
        -:    4:
        -:    5:#include <unordered_map>
        -:    6:#include <algorithm>
        -:    7:#include <cstdlib>
        -:    8:#include <ctime>
        -:    9:
        -:   10:#include <iostream>
        -:   11:
        -:   12:
       21:   13:Lair::Lair(const std::string& name, std::vector<std::pair<Enemy*, int>>& enemies) :
       21:   14:        name(name), enemies(enemies), maxenemies(enemies.size())
        -:   15:{
       21:   16:        std::sort(this->enemies.begin(), this->enemies.end(), [](const std::pair<Enemy*, int>& a, const std::pair<Enemy*, int>& b)
       89:   17:                { return a.second < b.second; });
        -:   18:
       21:   19:        enemyParams[EnemyType::NORMAL] = {150, 2, 20};
       21:   20:        enemyParams[EnemyType::FAST] = {100, 3, 30};
       21:   21:        enemyParams[EnemyType::TANK] = {300, 1, 50};
       21:   22:}
        -:   23:
       21:   24:Lair::Lair(const std::string& name, const std::vector<std::pair<EnemyType, int>>& enemies) :
       21:   25:        name(name), enemies(), maxenemies(enemies.size())
        -:   26:{
       21:   27:        enemyParams[EnemyType::NORMAL] = {150, 2, 20};
       21:   28:        enemyParams[EnemyType::FAST] = {100, 3, 30};
       21:   29:        enemyParams[EnemyType::TANK] = {300, 1, 50};
        -:   30:
      124:   31:        for (std::pair<EnemyType, int> enemy_pair : enemies) {
      103:   32:                Enemy* enemy = generateEnemy(enemy_pair.first);
      103:   33:                this->enemies.push_back(std::make_pair(enemy, enemy_pair.second));
        -:   34:        }
        -:   35:
       21:   36:        std::sort(this->enemies.begin(), this->enemies.end(), [](const std::pair<Enemy*, int>& a, const std::pair<Enemy*, int>& b)
       84:   37:                { return a.second < b.second; });
       21:   38:}
        -:   39:
       20:   40:Lair::Lair(const std::string& name, int numEnemies) : name(name), maxenemies(numEnemies)
        -:   41:{
       20:   42:        enemyParams[EnemyType::NORMAL] = {150, 2, 20};
       20:   43:        enemyParams[EnemyType::FAST] = {100, 3, 30};
       20:   44:        enemyParams[EnemyType::TANK] = {300, 1, 50};
        -:   45:
       20:   46:        srand(static_cast<unsigned>(time(0)));
        -:   47:
      340:   48:        for (int i = 0; i < numEnemies; ++i) {
      320:   49:                EnemyType type = (EnemyType)((rand() % 4) % 3); // so NORMAL will be 2x more likely to spawn
      320:   50:                Enemy* enemy = generateEnemy(type);
      320:   51:                int spawnTime = rand() % 15 + 3;
      320:   52:                enemies.push_back(std::make_pair(enemy, spawnTime));
        -:   53:        }
        -:   54:
       20:   55:        std::sort(this->enemies.begin(), this->enemies.end(), [](const std::pair<Enemy*, int>& a, const std::pair<Enemy*, int>& b)
     1500:   56:                { return a.second < b.second; });
       20:   57:}
        -:   58:
      248:   59:Lair::~Lair()
        -:   60:{
      592:   61:        for (std::pair<Enemy*, int>& pair : enemies) {
      530:   62:                delete pair.first;
        -:   63:        }
      186:   64:}
        -:   65:
        -:   66:
      427:   67:Enemy* Lair::generateEnemy(EnemyType type)
        -:   68:{
      427:   69:        if (enemyParams.find(type) != enemyParams.end()) {
      426:   70:                return new Enemy(enemyParams[type].maxhealth,
      426:   71:                                                 enemyParams[type].speed,
      426:   72:                                                 enemyParams[type].gold,
     1704:   73:                                                 type);
        -:   74:        }
        1:   75:        return nullptr;
        -:   76:}
        -:   77:
       60:   78:std::string Lair::getName() const { return name; }
        -:   79:
       23:   80:EnemyType Lair::stringToEnemyType(const std::string& type)
        -:   81:{
       23:   82:        if (type == "NORMAL") return EnemyType::NORMAL;
       22:   83:        if (type == "FAST") return EnemyType::FAST;
       21:   84:        if (type == "TANK") return EnemyType::TANK;
       20:   85:        return EnemyType::CUSTOM;
        -:   86:}
        -:   87:
        -:   88:// IControlSpawns
       41:   89:Enemy* Lair::getEnemy() const { if (enemies.empty()) return nullptr; return enemies[0].first; }
       44:   90:int Lair::getSpawnTime() const { if (enemies.empty()) return -1; return enemies[0].second; }
       60:   91:int Lair::getNumberOfEnemiesLeft() const { return enemies.size(); }
       60:   92:int Lair::getMaxEnemies() const { return maxenemies; }
        -:   93:
        3:   94:void Lair::spawnTimeProcess()
        -:   95:{
       11:   96:        for (std::pair<Enemy*, int>& enemy: enemies) {
        8:   97:                if (enemy.second > 0)
        8:   98:                        --enemy.second;
        -:   99:        }
        3:  100:}
        -:  101:
        -:  102:
        7:  103:Enemy* Lair::spawnEnemy()
        -:  104:{
        7:  105:        if (enemies.empty())
        1:  106:                return nullptr;
        -:  107:
        6:  108:        if (enemies[0].second == 0) {
        3:  109:                Enemy* enemy = enemies[0].first;
        3:  110:                enemies.erase(enemies.begin());
        3:  111:                return enemy;
        -:  112:        }
        -:  113:
        3:  114:        return nullptr;
        -:  115:}
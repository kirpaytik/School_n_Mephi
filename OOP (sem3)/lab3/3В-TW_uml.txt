Landscape (реализует интерфейсы IControlLives, IMakeBuilds и IControlBuilds):
<<get>> - width : int
<<get>> - height : int
- castle : Castle
- lairs : vector<tuple<Lair*, int x, int y>>
- fields : vector<Field*>
- roads : vector<Road*>
<<constructor>> + Landscape (width : int, height : int)
+ get_cell (x : int, y : int) : Cell
+ set_cell (x : int, y : int, cell : Cell) : void
<<override>> + move_enemy(Enemy*) : void
<<override>> + deal_dmg(Enemy*) : void
<<override>> + kill_enemy(Enemy*) : void
<<override>> + build() : DefenseBuilding*
<<override>> + upgrade_building (DefenseBuilding*) : void
<<override>> + attack(DefenseBuilding*) : BuildAttack*
<<override>> + delete_building (DefenseBuilding*) : void

Game (реализует интерфейс IGameControl)
<<get/set>> - land : Landscape*
<<override>> + check_gamelevel() : bool
<<override>> + check_gamestatus() : bool
<<override>> + update() : void

Cell (класс-контейнер для Game и DefenseBuilding):
<<get>> - x : int
<<get>> - y : int

Field (наследуется от Cell):
<<get/set>> - tower : Tower*

Road (наследуется от Cell):
<<get/set>> - enemy : Enemy*
<<get/set>> - trap : Trap*

Structure:
(it's blank, but it's a base class for classes Castle, Lair, Tower and Trap)

Castle (наследуется от Structure; реализует интерфейс IDamagable):
<<get>> - name : string
<<get>> - maxhealth : int
<<get/set>> - currhealth : int
<<get/set>> - gold : int
<<constructor>> + Castle (name : string, maxhealth : int)
<<override>> + take_damage (damage : int) : void
+ add_gold (gold_amount : int) : void

Lair (наследуется от Structure, реализует интерфейс ISpawnable):
<<get>> - name : string
<<get>> - enemies : vector<pair<Enemy>, int>
<<constructor>> + Log (name : string, intitial_enemy_num : int)
<<override>> + spawn_enemy() : Enemy*

Enemy (используется в Lair, реализует интерфейсы IMovable, IDamagable и IEffectProcessor):
<<get>> - maxhealth : int
<<get/set>> - currhealth : int
<<get/set>> - gold : int
<<get/set>> - speed : int
<<get/set>> - effects : vector<EffectAttack*>
<<constructor>> + Enemy (health : int, gold : int, speed : int)
<<override>> + damage_taken(damage : int) : int
<<override>> + is_alive() : bool
<<override>> + apply_effect(effect : EffectAttack) : void
<<override>> + process_effects() : void

DefenseBuilding (наследуется от Structure; реализует интерфейсы IAttacker и IUpgradeable):
<<get>> - cost : int
<<get>> - level : int
<<get>> - radius : int
<<get>> - damage : int
<<constructor>> DefenseBuilding (level : int, type : string)
<<virtual>> attack() : BuildingAttack
<<override>> + strategy (enemies : vector<Enemy*>, pos : Cell) : Enemy*
<<virtual>> upgrade() : void
<<override>> + build() : DefenseBuilding*
<<override>> + upgrade_building (DefenseBuilding*) : void

Tower (виртуально наследуется от DefenseBuilding):
<<get>> - attack_speed : int

MagicBuilding (виртуально наследуется от DefenseBuilding):
<<get>> - effect : EffectAttack

MagicTower (множественно наследуется от Tower и MagicBuilding):
(пусто)

MagicTrap (наследуется от MagicBuilding):
(пусто)

BuildingAttack (контейнер для DefenseBuilding):
<<get>> - damage : int
<<get>> - effect : EffectAttack

EffectAttack (контейнер для BuildingAttack и MagicBuilding):
<<get>> - strength : int
<<get>> - duration : int

PoisonEffect (наследуется от EffectAttack):
<<get>> - damage : int

SlownessEffect (наследуется от EffectAttack):
<<get>> - percentage : int

WeaknessEffect (наследуется от EffectAttack):
<<get>> - percentage : int

<<Interface>> IGameControl:
<<abstract>> + check_gamelevel() : bool
<<abstract>> + check_gamestatus() : bool
<<abstract>> + update() : void

<<Interface>> IControlLives:
<<abstract>> + move_enemy(Enemy*) : void
<<abstract>> + deal_dmg(Enemy*) : void
<<abstract>> + kill_enemy(Enemy*) : void

<<Interface>> IMakeBuilds:
<<abstract>> + build() : DefenseBuilding*
<<abstract>> + upgrade_building (DefenseBuilding*) : void

<<Interface>> IControlBuilds
<<abstract>> + attack(DefenseBuilding*) : BuildAttack*
<<abstract>> + delete_building (DefenseBuilding*) : void

<<Interface>> ISpawnable:
<<abstract>> + spawn() : Enemy

<<Interface>> IMovable:
<<abstract>> + move() : Enemy

<<Interface>> IDamagable:
<<abstract>> + damage_taken (attack : Attack) : int
<<abstract>> + set_health (health : int) : void
<<abstract>> + Is_alive() : bool

<<Interface>> IEffectProcessor:
<<abstract>> + apply_effect (effect : EffectAttack) : void
<<abstract>> + process_effects() : void

<<Interface>> IAttacker:
<<abstract>> + attack() : Attack
<<abstract>> + strategy (enemies : vector<Enemy*>, pos : cell) : Enemy*

<<Interface>> IUpgradable:
<<abstract>> + upgrade() : void

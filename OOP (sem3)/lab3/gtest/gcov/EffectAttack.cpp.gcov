        -:    0:Source:../cpp/EffectAttack.cpp
        -:    0:Graph:EffectAttack.gcno
        -:    0:Data:EffectAttack.gcda
        -:    0:Runs:1
        -:    1:#include "../hpp/EffectAttack.hpp"
        -:    2:
        -:    3:
      227:    4:EffectAttack::EffectAttack(EffectType type, int level) : type(type), level(level - 1)
      227:    5:        { upgrade();}
        -:    6:
       40:    7:EffectType EffectAttack::getType() const { return type; }
       49:    8:int EffectAttack::getLevel() const { return level; }
       10:    9:int EffectAttack::getAttribute() const { return attribute; }
       10:   10:int EffectAttack::getMinApplied() const { return minApplied; }
      109:   11:int EffectAttack::getDuration() const { return duration; }
       40:   12:void EffectAttack::setDuration(int newduration) { duration = newduration; }
       40:   13:void EffectAttack::addDuration(int addDuration) { duration += addDuration; }
       40:   14:bool EffectAttack::isExpired() const { return duration == 0; }
        -:   15:
       12:   16:int EffectAttack::getAppliedValue(int value_to_apply_to) const
        -:   17:{
       12:   18:        if (type == EffectType::POISON)
        3:   19:                return attribute;
        -:   20:
        9:   21:        int applied_val = value_to_apply_to * attribute / 100.0;
        -:   22:
        9:   23:        if (applied_val < minApplied) {
        3:   24:                applied_val = minApplied;
        -:   25:        }
        -:   26:
        9:   27:        return applied_val;
        -:   28:}
        -:   29:
        -:   30:
      236:   31:void EffectAttack::upgrade()
        -:   32:{
      236:   33:        if (level == 3)
        3:   34:                return;
        -:   35:
      233:   36:        switch (level) {
       81:   37:        case 0: // 0 -> 1 (first time installing)
       81:   38:                switch (type) {
       27:   39:                case EffectType::POISON:
       27:   40:                        attribute = 5;
       27:   41:                        minApplied = 0;
       27:   42:                        break;
       26:   43:                case EffectType::SLOWNESS:
       26:   44:                        attribute = 10; // percentage
       26:   45:                        minApplied = 0;
       26:   46:                        break;
       28:   47:                case EffectType::WEAKNESS:
       28:   48:                        attribute = 15; // percentage
       28:   49:                        minApplied = 0;
       28:   50:                        break;
        -:   51:                }
        -:   52:
       81:   53:                duration = 4;
       81:   54:                break;
        -:   55:
       74:   56:        case 1: // 1 -> 2
       74:   57:                switch (type) {
       23:   58:                case EffectType::POISON:
       23:   59:                        attribute = 8;
       23:   60:                        minApplied = 0;
       23:   61:                        break;
       21:   62:                case EffectType::SLOWNESS:
       21:   63:                        attribute = 20; // percentage
       21:   64:                        minApplied = 0;
       21:   65:                        break;
       30:   66:                case EffectType::WEAKNESS:
       30:   67:                        attribute = 25; // percentage
       30:   68:                        minApplied = 10;
       30:   69:                        break;
        -:   70:                }
        -:   71:
       74:   72:                duration = 6;
       74:   73:                break;
        -:   74:
       78:   75:        case 2: // 2 -> 3
       78:   76:                switch (type) {
       28:   77:                case EffectType::POISON:
       28:   78:                        attribute = 14;
       28:   79:                        minApplied = 0;
       28:   80:                        break;
       23:   81:                case EffectType::SLOWNESS:
       23:   82:                        attribute = 50; // percentage
       23:   83:                        minApplied = 1;
       23:   84:                        break;
       27:   85:                case EffectType::WEAKNESS:
       27:   86:                        attribute = 50; // percentage
       27:   87:                        minApplied = 25;
       27:   88:                        break;
        -:   89:                }
        -:   90:
       78:   91:                duration = 3;
       78:   92:                break;
        -:   93:        }
        -:   94:
      233:   95:        ++level;
        -:   96:}
        -:   97:
        -:   98:
       83:   99:bool EffectAttack::operator == (const EffectAttack& other) const
        -:  100:{
      126:  101:        return (type == other.type) && (level == other.level) && (attribute == other.attribute) &&
      126:  102:                (minApplied == other.minApplied) && (duration == other.duration);
        -:  103:}
        -:    0:Source:../mvc/Game.cpp
        -:    0:Graph:Game.gcno
        -:    0:Data:Game.gcda
        -:    0:Runs:2
        -:    1:#include "../mvc/Game.hpp"
        -:    2:
        -:    3:#include "../hpp/Landscape.hpp"
        -:    4:#include "../hpp/PriceTable.hpp"
        -:    5:
        -:    6:#include "../hpp/Castle.hpp"
        -:    7:#include "../hpp/Lair.hpp"
        -:    8:#include "../hpp/Enemy.hpp"
        -:    9:#include "../hpp/DefBuild.hpp"
        -:   10:#include "../hpp/Tower.hpp"
        -:   11:#include "../hpp/MagicTower.hpp"
        -:   12:#include "../hpp/MagicTrap.hpp"
        -:   13:
        -:   14:#include <iostream>
        -:   15:#include <stdexcept>
        -:   16:#include <vector>
        -:   17:#include <unordered_set>
        -:   18:#include <queue>
        -:   19:#include <algorithm>
        -:   20:
        -:   21:
        2:   22:Game::Game() : land(nullptr) {}
        -:   23:
        -:   24:
        2:   25:Game::~Game() { delete land; }
        -:   26:
        -:   27:
      477:   28:Landscape* Game::getLandscape() const { return land; }
        -:   29:
        -:   30:
        1:   31:bool Game::initializeGame(std::ifstream& file)
        -:   32:{
        -:   33:        try {
        1:   34:                land = parseLandscape(file);
        1:   35:                connectRoads();
        1:   36:                return checkGameLevel();
    =====:   37:        } catch (const std::exception& e) {
    =====:   38:                std::cerr << "Error initializing game: " << std::endl;
    =====:   39:                std::cerr << e.what() << std::endl;
    =====:   40:                return false;
    =====:   41:        }
        -:   42:}
        -:   43:
        -:   44:
        1:   45:void Game::connectRoads()
        -:   46:{
        1:   47:        Castle* castle = land->getCastle();
        1:   48:        if (!castle) {
    #####:   49:                throw std::logic_error("Castle is not initialized.");
        -:   50:        }
        -:   51:
        1:   52:        int x_castle = land->getCastleX();
        1:   53:        int y_castle = land->getCastleY();
        -:   54:
        -:   55:        // Find castle's adjacent roads, which is the last path's road
        1:   56:        std::unordered_set<Road*> lastRoads;
       28:   57:        for (Road* road : land->getRoads()) {
       27:   58:                if (Landscape::calculateDistance(x_castle, y_castle, road->getX(), road->getY()) == 1.0f) {
        1:   59:                        road->setNextRoad(nullptr);
        1:   60:                        lastRoads.insert(road);
        -:   61:                }
        1:   62:        }
        1:   63:        if (lastRoads.empty()) {
    #####:   64:                throw std::logic_error("No road found adjacent to the castle.");
        -:   65:        }
        -:   66:
        3:   67:        std::vector<Road*> roadsWithNext(lastRoads.begin(), lastRoads.end());
        -:   68:
       27:   69:        while (!roadsWithNext.empty()) {
       26:   70:                std::vector<Road*> newRoadsWithNext;
        -:   71:
       53:   72:                for (Road* curr_road : roadsWithNext) {
      756:   73:                        for (Road* road : land->getRoads()) {
        -:   74:                                // совпадает, или уже имеет следующую дорогу, или начальная без следующей - так что эта не "предыдущая" для curr_road
      729:   75:                                if (road == curr_road || road->getNextRoad() || lastRoads.find(road) != lastRoads.end())
      380:   76:                                        continue;
        -:   77:
      698:   78:                                if (Landscape::calculateDistance(curr_road->getX(), curr_road->getY(),
     1047:   79:                                                                                                road->getX(), road->getY()) == 1.0f) {
       26:   80:                                        road->setNextRoad(curr_road);
       26:   81:                                        newRoadsWithNext.push_back(road);
        -:   82:                                }
       27:   83:                        }
        -:   84:                }
        -:   85:
       26:   86:                roadsWithNext = std::move(newRoadsWithNext);
       26:   87:        }
        -:   88:
        -:   89:        // bool flag = true;
        -:   90:        // while (flag) {
        -:   91:        //      flag = false;
        -:   92:        //      for (Road* curr_road : land->getRoads()) {
        -:   93:        //              if (!curr_road->getNextRoad())
        -:   94:        //                      continue;
        -:   95:
        -:   96:        //              for (Road* road : land->getRoads()) {
        -:   97:        //                      // совпадает или уже имеет следующую дорогу, так что эта не "предыдущая" для curr_road
        -:   98:        //                      if (road == curr_road || road->getNextRoad())
        -:   99:        //                              continue;
        -:  100:
        -:  101:        //                      if (Landscape::calculateDistance(curr_road->getX(), curr_road->getY(),
        -:  102:        //                                                                                      road->getX(), road->getY()) == 1.0f) {
        -:  103:        //                              road->setNextRoad(curr_road);
        -:  104:        //                              flag = true;
        -:  105:        //                      }
        -:  106:        //              }
        -:  107:        //      }
        -:  108:        // }
        2:  109:}
        -:  110:
        -:  111:
        1:  112:bool Game::checkGameLevel() const
        -:  113:{
        1:  114:        if (land->getCastle() == nullptr) {
    #####:  115:                std::cerr << "Error: No castle?" << std::endl;
    #####:  116:                return false;
        -:  117:        }
        -:  118:
        1:  119:        if (land->getLairs().empty()) {
    #####:  120:                std::cerr << "Error: No lairs?" << std::endl;
    #####:  121:                return false;
        -:  122:        }
        -:  123:
        3:  124:        for (const std::tuple<Lair*, int, int>& lair_tuple : land->getLairs()) {
        2:  125:                Lair* lair = std::get<0>(lair_tuple);
        2:  126:                if (!lair->getEnemy()) {
    #####:  127:                        std::cerr << "Error: Lair '" << lair->getName() << "': no enemies?" << std::endl;
    #####:  128:                        return false;
        -:  129:                }
        1:  130:        }
        -:  131:
        1:  132:        int x_castle = land->getCastleX();
        1:  133:        int y_castle = land->getCastleY();
       1*:  134:        if (x_castle < 0 || x_castle >= land->getWidth() || y_castle < 0 || y_castle >= land->getHeight()) {
    #####:  135:                std::cerr << "Where did you put your Castle bruh" << std::endl;
    #####:  136:                return false;
        -:  137:        }
        -:  138:
        3:  139:        for (const std::tuple<Lair*, int, int>& lair_tuple : land->getLairs()) {
        2:  140:                int x_lair = std::get<1>(lair_tuple);
        2:  141:                int y_lair = std::get<2>(lair_tuple);
       2*:  142:                if (x_lair < 0 || x_lair >= land->getWidth() || y_lair < 0 || y_lair >= land->getHeight()) {
    #####:  143:                        std::cerr << "Where did you put the '" << std::get<0>(lair_tuple)->getName() << "' Lair lol" << std::endl;
    #####:  144:                        return false;
        -:  145:                }
        -:  146:
        2:  147:                bool path_found = false;
       28:  148:                for (Road* road : land->getRoads()) {
       28:  149:                        if (land->calculateDistance(x_lair, y_lair, road->getX(), road->getY()) <= 1.0f) {
        2:  150:                                Road* curr_road = road;
       49:  151:                                while (curr_road != nullptr) {
       49:  152:                                        if (land->calculateDistance(curr_road->getX(), curr_road->getY(), x_castle, y_castle) <= 1.0f) {
        2:  153:                                                path_found = true;
        2:  154:                                                break;
        -:  155:                                        }
       47:  156:                                        curr_road = curr_road->getNextRoad();
        -:  157:                                }
        2:  158:                                if (path_found) break;
        -:  159:                        }
        2:  160:                }
        -:  161:
        2:  162:                if (!path_found) {
    #####:  163:                        std::cerr << "Error: No path to castle? Lair '" << std::get<0>(lair_tuple)->getName() << "'." << std::endl;
    #####:  164:                        return false;
        -:  165:                }
        1:  166:        }
        -:  167:
        1:  168:        return true;
        -:  169:}
        -:  170:
        -:  171:
      229:  172:void Game::checkGameStatus()
        -:  173:{
      229:  174:        if (!land->getCastle()->isAlive()) {
    #####:  175:                status = GameStatus::LOSS;
    #####:  176:                return;
        -:  177:        }
        -:  178:
      229:  179:        if (land->areEnemiesLeft())
      225:  180:                status = GameStatus::RUNNING;
        -:  181:        else
        4:  182:                status = GameStatus::WIN;
        -:  183:}
        -:  184:
        -:  185:
      229:  186:int Game::isGameOver()
        -:  187:{
      229:  188:        checkGameStatus();
     229*:  189:        return status == GameStatus::RUNNING ? 0 : (status == GameStatus::WIN ? 1 : -1);
        -:  190:}
        -:  191:
        -:  192:
      113:  193:void Game::update()
        -:  194:{
      113:  195:        moveEnemies();
      113:  196:        killCorpses();
        -:  197:
      113:  198:        land->spawnTimeProcess();
        -:  199:
      113:  200:        enemiesProcessEffects();
      113:  201:        killCorpses();
        -:  202:
      113:  203:        land->processBuildsReadiness();
        -:  204:
      113:  205:        attackDefBuilds();
      113:  206:        killCorpses();
      113:  207:}
        -:  208:
        -:  209:
      113:  210:void Game::moveEnemies()
        -:  211:{
      113:  212:        std::queue<Enemy*> enemyQueue;
        -:  213:
      113:  214:        std::vector<Road*> roads = land->getRoads();
      113:  215:        std::reverse(roads.begin(), roads.end());
     3164:  216:        for (Road* road : roads) {
     3051:  217:                if (Enemy* enemy = road->getEnemy()) {
      287:  218:                        enemyQueue.push(enemy);
        -:  219:                }
        -:  220:        }
        -:  221:
      113:  222:        bool hasMoved = true;
      251:  223:        while (hasMoved && !enemyQueue.empty()) {
      138:  224:                hasMoved = false;
      138:  225:                int queueSize = enemyQueue.size();
        -:  226:
      485:  227:                for (int i = 0; i < queueSize; ++i) {
      347:  228:                        Enemy* enemy = enemyQueue.front();
      347:  229:                        enemyQueue.pop();
        -:  230:
      347:  231:                        bool isMoved = land->moveEnemy(enemy);
      347:  232:                        bool isKilled = killIfCorpse(enemy);
        -:  233:
        -:  234:                        // если двинут или умер - сможем подвинуть кого-то ещё, нужно будет продолжить while
      347:  235:                        if (isMoved || isKilled) {
      223:  236:                                hasMoved = true;
        -:  237:                        }
        -:  238:                        // остальных (не двинулся и жив) позже попробуем двинуть ещё раз (пуш в очередь)
        -:  239:                        else {
      124:  240:                                enemyQueue.push(enemy);
        -:  241:                        }
        -:  242:                }
        -:  243:        }
      226:  244:}
        -:  245:
        -:  246:
      113:  247:void Game::enemiesProcessEffects()
        -:  248:{
     3164:  249:        for (Road* road : land->getRoads()) {
     3051:  250:                Enemy* enemy = road->getEnemy();
     3051:  251:                if (enemy) {
      338:  252:                        enemy->processEffects();
        -:  253:                }
      113:  254:        }
      113:  255:}
        -:  256:
        -:  257:
      113:  258:void Game::attackDefBuilds()
        -:  259:{
     5650:  260:        for (Field* field : land->getFields()) {
     5537:  261:                DefBuild* defbuild = field->getBuild();
     5537:  262:                if (defbuild) {
     1469:  263:                        land->attack(defbuild);
        -:  264:                }
      113:  265:        }
      113:  266:}
        -:  267:
        -:  268:
      339:  269:void Game::killCorpses()
        -:  270:{
     9492:  271:        for (Road* road : land->getRoads()) {
     9153:  272:                Enemy* enemy = road->getEnemy();
        -:  273:
     9153:  274:                if (enemy && ( !enemy->isAlive() || land->isCastleReached(enemy) )) {
       51:  275:                        land->killEnemy(enemy);
        -:  276:                }
      339:  277:        }
      339:  278:}
        -:  279:
        -:  280:
      347:  281:bool Game::killIfCorpse(Enemy* enemy)
        -:  282:{
      347:  283:        if (!enemy->isAlive() || land->isCastleReached(enemy)) {
        9:  284:                land->killEnemy(enemy);
        9:  285:                return true;
        -:  286:        }
        -:  287:
      338:  288:        return false;
        -:  289:}
        -:  290:
        -:  291:
     1500:  292:bool Game::canBuildHere(int x, int y) const
        -:  293:{
     1500:  294:        Field* field = land->getField(x, y);
    1500*:  295:        if (field && field->getBuild())
    #####:  296:                return false;
        -:  297:
     1500:  298:        Road* road = land->getRoad(x, y);
     1500:  299:        if (road && road->getMTrap())
     1141:  300:                return false;
        -:  301:
      359:  302:        if (!road && !field)
    #####:  303:                return false;
        -:  304:
      359:  305:        return true;
        -:  306:}
        -:  307:
        -:  308:
      359:  309:bool Game::canBuildHere(int x, int y, BuildType type) const
        -:  310:{
        -:  311:        // if это поле; неправильный тип башни или занято
      359:  312:        Field* field = land->getField(x, y);
     359*:  313:        if (field && (type == BuildType::MAGICTRAP || field->getBuild()))
    #####:  314:                return false;
        -:  315:
        -:  316:        // if это дорога; неправильный тип башни или занято
      359:  317:        Road* road = land->getRoad(x, y);
     359*:  318:        if (road && (type != BuildType::MAGICTRAP || road->getMTrap()))
    #####:  319:                return false;
        -:  320:
        -:  321:        // if вообще нет клетки
      359:  322:        if (!road && !field)
    #####:  323:                return false;
        -:  324:
      359:  325:        return true;
        -:  326:}
        -:  327:
        -:  328:
       28:  329:bool Game::canUpgradeHere(int x, int y) const
        -:  330:{
       28:  331:        DefBuild* defbuild = land->getBuild(x, y);
       28:  332:        if (defbuild && !defbuild->isUpgraded())
        7:  333:                return true;
        -:  334:
       21:  335:        return false;
        -:  336:}
        -:  337:
        -:  338:
    #####:  339:bool Game::isDefBuildHere(int x, int y) const { return land->getBuild(x, y) != nullptr; }
        -:  340:
        -:  341:
        7:  342:int Game::getUpgradeCost(int x, int y) const
        -:  343:{
        7:  344:        DefBuild* defbuild = land->getBuild(x, y);
        -:  345:
        7:  346:        PriceBuildKey key1 = {defbuild->getType(), defbuild->getStrategy(), EffectType::POISON, defbuild->getLevel()};
        7:  347:        if (defbuild->getType() != BuildType::TOWER) key1.effect = defbuild->getEffect();
        -:  348:
        7:  349:        PriceBuildKey key2 = key1;
        7:  350:        ++(key2.level);
        -:  351:
       14:  352:        return PriceTable::getBuildCost(key2) - PriceTable::getBuildCost(key1);
        -:  353:}
        -:  354:
        -:  355:
      366:  356:bool Game::isEnoughGold(int cost) const { return land->getCastle()->getGold() >= cost; }
        -:  357:
        -:  358:
      359:  359:void Game::buildDefBuild(int x, int y, PriceBuildKey key)
        -:  360:{
      359:  361:        BuildStats stats;
        -:  362:        try {
      359:  363:                stats = PriceTable::getBuildStats(key);
    =====:  364:        } catch (const std::exception& e) {
    =====:  365:                std::cerr << "hidude: " << e.what() << std::endl;
    =====:  366:                throw e;
    =====:  367:        }
        -:  368:        DefBuild* defbuild;
        -:  369:
      359:  370:        if (key.type == BuildType::TOWER) {
        8:  371:                defbuild = new Tower(stats.cost, key.level, stats.radius, stats.damage, key.strat, stats.attackspeed);
        -:  372:        }
      351:  373:        else if (key.type == BuildType::MAGICTOWER) {
        5:  374:                defbuild = new MagicTower(stats.cost, key.level, stats.radius, stats.damage, key.strat, stats.attackspeed, key.effect);
        -:  375:        }
      346:  376:        else if (key.type == BuildType::MAGICTRAP) {
      346:  377:                defbuild = new MagicTrap(stats.cost, key.level, stats.radius, stats.damage, key.strat, key.effect);
        -:  378:        }
        -:  379:
        -:  380:        // land->setDefBuild(x, y, defbuild);
      359:  381:        defbuild->installOnCell(land, x, y);
        -:  382:
      359:  383:        land->getCastle()->reduceGold(stats.cost);
      359:  384:}
        -:  385:
        -:  386:
        7:  387:void Game::upgradeDefBuild(int x, int y, int cost)
        7:  388:{ land->getBuild(x, y)->upgrade(); land->getCastle()->reduceGold(cost); }
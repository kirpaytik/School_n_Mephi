        -:    0:Source:../cpp/Landscape.cpp
        -:    0:Graph:Landscape.gcno
        -:    0:Data:Landscape.gcda
        -:    0:Runs:2
        -:    1:#include "../hpp/Landscape.hpp"
        -:    2:
        -:    3:#include "../hpp/Castle.hpp"
        -:    4:#include "../hpp/Lair.hpp"
        -:    5:#include "../hpp/Road.hpp"
        -:    6:#include "../hpp/Field.hpp"
        -:    7:#include "../hpp/Enemy.hpp"
        -:    8:#include "../hpp/DefBuild.hpp"
        -:    9:#include "../hpp/BuildAttack.hpp"
        -:   10:
        -:   11:#include "../hpp/EffectAttack.hpp"
        -:   12:
        -:   13:#include <cmath>
        -:   14:#include <limits>
        -:   15:
        -:   16:#include <iostream>
        -:   17:
        -:   18:
    #####:   19:Landscape::Landscape() : width(0), height(0), castle(nullptr, 0, 0), lairs(), fields(), roads() {}
        -:   20:
        1:   21:Landscape::Landscape(int width, int height, std::tuple<Castle*, int, int> castle,
        1:   22:        std::vector<std::tuple<Lair*, int, int>> lairs, std::vector<Field*> fields, std::vector<Road*> roads) :
        1:   23:        width(width), height(height), castle(castle), lairs(lairs), fields(fields), roads(roads) {}
        -:   24:
        4:   25:Landscape::~Landscape()
        -:   26:{
        1:   27:        delete std::get<0>(castle);
        3:   28:        for (std::tuple<Lair*, int, int>& lair: lairs) {
        2:   29:                delete std::get<0>(lair);
        -:   30:        }
       50:   31:        for (Field* field : fields) {
       49:   32:                delete field;
        -:   33:        }
       28:   34:        for (Road* road : roads) {
       27:   35:                delete road;
        -:   36:        }
        3:   37:}
        -:   38:
        -:   39:
        3:   40:int Landscape::getWidth() const { return width; }
        -:   41:
        3:   42:int Landscape::getHeight() const { return height; }
        -:   43:
     1329:   44:Castle* Landscape::getCastle() const { return std::get<0>(castle); }
        2:   45:int Landscape::getCastleX() const { return std::get<1>(castle); }
        2:   46:int Landscape::getCastleY() const { return std::get<2>(castle); }
        -:   47:
        3:   48:std::vector<std::tuple<Lair*, int, int>> Landscape::getLairs() const { return lairs; }
        -:   49:
    #####:   50:Lair* Landscape::getLair(int indx) const { return std::get<0>(lairs.at(indx)); }
        -:   51:
      229:   52:bool Landscape::areEnemiesLeft() const
        -:   53:{
      245:   54:        for (std::tuple<Lair*, int, int> lair : lairs) {
      237:   55:                if (std::get<0>(lair)->getEnemy())
      221:   56:                        return true;
        -:   57:        }
        -:   58:
      120:   59:        for (Road* road : roads) {
      116:   60:                if (road->getEnemy())
        4:   61:                        return true;
        -:   62:        }
        -:   63:
        4:   64:        return false;
        -:   65:}
        -:   66:
      115:   67:std::vector<Field*> Landscape::getFields() const { return fields; }
      704:   68:std::vector<Road*> Landscape::getRoads() const { return roads; }
        -:   69:
    #####:   70:Field* Landscape::getField(int indx) const { return fields.at(indx); }
        -:   71:
    #####:   72:Road* Landscape::getRoad(int indx) const { return roads.at(indx); }
        -:   73:
     1914:   74:Field* Landscape::getField(int x, int y) const
        -:   75:{
    93894:   76:        for (Field* field : fields)
    92048:   77:                if (field->getX() == x && field->getY() == y)
       68:   78:                        return field;
        -:   79:
     1846:   80:        return nullptr;
        -:   81:}
        -:   82:
        -:   83:
     2558:   84:Road* Landscape::getRoad(int x, int y) const
        -:   85:{
    29644:   86:        for (Road* road : roads)
    29602:   87:                if (road->getX() == x && road->getY() == y)
     2516:   88:                        return road;
        -:   89:
       42:   90:        return nullptr;
        -:   91:}
        -:   92:
        -:   93:
     1073:   94:Field* Landscape::getField(const DefBuild* defbuild) const
        -:   95:{
    29790:   96:        for (Field* field : fields)
    29790:   97:                if (field->getBuild() == defbuild)
     1073:   98:                        return field;
        -:   99:
    #####:  100:        return nullptr;
        -:  101:}
        -:  102:
       72:  103:Road* Landscape::getEmptyRoad(std::tuple<Lair*, int, int> lairTuple) const
        -:  104:{
       72:  105:        int x_lair = std::get<1>(lairTuple), y_lair = std::get<2>(lairTuple);
        -:  106:
     1176:  107:        for (Road* road : roads) {
     1164:  108:                if (road->isEmptyEnemy() && calculateDistance(x_lair, y_lair, road->getX(), road->getY()) == 1)
       60:  109:                        return road;
        -:  110:        }
        -:  111:
       12:  112:        return nullptr;
        -:  113:}
        -:  114:
     2033:  115:Road* Landscape::getRoad(const Enemy* enemy) const
        -:  116:{
    16484:  117:        for (Road* road : roads)
    16484:  118:                if (road->getEnemy() == enemy)
     2033:  119:                        return road;
        -:  120:
    #####:  121:        return nullptr;
        -:  122:}
        -:  123:
        -:  124:
      648:  125:Road* Landscape::getRoad(const MagicTrap* mtrap) const
        -:  126:{
     4694:  127:        for (Road* road : roads)
     4694:  128:                if (road->getMTrap() == mtrap)
      648:  129:                        return road;
        -:  130:
    #####:  131:        return nullptr;
        -:  132:}
        -:  133:
        -:  134:
       42:  135:DefBuild* Landscape::getBuild(int x, int y) const
        -:  136:{
       42:  137:        Field* field = getField(x, y);
       42:  138:        if (field && field->getBuild())
       13:  139:                return field->getBuild();
        -:  140:
       29:  141:        Road* road = getRoad(x, y);
       29:  142:        if (road && road->getMTrap())
       10:  143:                return road->getMTrap();
        -:  144:
       19:  145:        return nullptr;
        -:  146:}
        -:  147:
        -:  148:
        -:  149:// void Landscape::setDefBuild(DefBuild* defbuild)
        -:  150:// {
        -:  151://      Tower* tower = dynamic_cast<Tower*>(defbuild);
        -:  152://      if (tower) {
        -:  153://              getField(x, y)->setBuild(defbuild);
        -:  154://      }
        -:  155:
        -:  156://      MagicTrap* mtrap = dynamic_cast<MagicTrap*>(defbuild);
        -:  157://      if (mtrap) {
        -:  158://              getRoad(x, y)->setMTrap(defbuild);
        -:  159://      }
        -:  160:// }
        -:  161:
        -:  162:
        -:  163:// std::pair<int, int> Landscape::getCoord(DefBuild* defbuild) const
        -:  164:// {
        -:  165://      int x, y;
        -:  166:
        -:  167://      Tower* tower = dynamic_cast<Tower*>(defbuild);
        -:  168://      if (tower) {
        -:  169://              Field* field = getField(tower);
        -:  170://              x = field->getX();
        -:  171://              y = field->getY();
        -:  172://      }
        -:  173:
        -:  174://      MagicTrap* mtrap = dynamic_cast<MagicTrap*>(defbuild);
        -:  175://      if (mtrap) {
        -:  176://              Road* curr_road = getRoad(mtrap);
        -:  177://              x = curr_road->getX();
        -:  178://              y = curr_road->getY();
        -:  179://      }
        -:  180:
        -:  181://      return std::pair<int, int>(x, y);
        -:  182:// }
        -:  183:
        -:  184:
      113:  185:void Landscape::spawnTimeProcess()
        -:  186:{
      339:  187:        for (std::tuple<Lair*, int, int> lair_tuple : lairs) {
      226:  188:                Lair* lair = std::get<0>(lair_tuple);
        -:  189:                // reduce time
      226:  190:                lair->spawnTimeProcess();
        -:  191:                // spawn
      226:  192:                if (lair->getSpawnTime() == 0) {
       72:  193:                        spawnEnemyAtLair(lair_tuple);
        -:  194:                }
        -:  195:        }
      113:  196:}
        -:  197:
        -:  198:
    #####:  199:Enemy* Landscape::spawnEnemy()
        -:  200:{
    #####:  201:        for (std::tuple<Lair*, int, int> lair_tuple : lairs) {
    #####:  202:                spawnEnemyAtLair(lair_tuple);
        -:  203:        }
        -:  204:
    #####:  205:        return nullptr; // doesn't needed but cuz same interface with Lair which needs the return of Enemy*
        -:  206:}
        -:  207:
        -:  208:
       72:  209:void Landscape::spawnEnemyAtLair(std::tuple<Lair*, int, int> lairTuple)
        -:  210:{
       72:  211:        Road* road = getEmptyRoad(lairTuple);
       72:  212:        if (!road)
       12:  213:                return;
        -:  214:
       60:  215:        Enemy* enemy = std::get<0>(lairTuple)->spawnEnemy();
       60:  216:        if (enemy) {
       60:  217:                road->setEnemy(enemy);
        -:  218:        }
        -:  219:}
        -:  220:
        -:  221:
      347:  222:bool Landscape::moveEnemy(Enemy* enemy)
        -:  223:{
      347:  224:        if (!enemy->isAlive())
        2:  225:                return true;
        -:  226:
      345:  227:        Road* curr_road = getRoad(enemy);
        -:  228:
        -:  229:        // if mtrap was installed under his feet in between game ticks, then it needs to be processed right now
      345:  230:        activateTrapIfEnemy(curr_road);
      345:  231:        if (!enemy->isAlive())
        3:  232:                return true;
        -:  233:
      342:  234:        int move_dist = enemy->move();
      342:  235:        Road* road_temp = curr_road;
      342:  236:        Road* next_road = curr_road;
        -:  237:
      342:  238:        std::vector<DefBuild*> mtraps;
        -:  239:        // move step-by-step
      779:  240:        while (move_dist > 0) {
      441:  241:                next_road = next_road->getNextRoad();
      441:  242:                if (!next_road) {
    #####:  243:                        return true; // castle is reached
        -:  244:                }
        -:  245:
      441:  246:                DefBuild* defbuild = next_road->getMTrap();
      441:  247:                if (defbuild) {
      184:  248:                        mtraps.push_back(defbuild); // save the activated mtrap until the enemy would actually be moved
        -:  249:                }
        -:  250:
        -:  251:                // if the next road is empty, then move the enemy to it
      441:  252:                if (!next_road->getEnemy()) {
      292:  253:                        curr_road->setEnemy(nullptr);
      292:  254:                        next_road->setEnemy(enemy);
      292:  255:                        curr_road = next_road;
        -:  256:
        -:  257:                        // set off mtraps
      459:  258:                        for (DefBuild* mtrap : mtraps) {
      171:  259:                                attack(mtrap);
        -:  260:
      171:  261:                                if (!enemy->isAlive())
        4:  262:                                        return true;
        -:  263:                        }
      288:  264:                        mtraps.clear();
        -:  265:                }
        -:  266:
      437:  267:                --move_dist;
        -:  268:        }
        -:  269:
      338:  270:        if (road_temp == getRoad(enemy))
      124:  271:                return false;
        -:  272:
      214:  273:        return true;
      342:  274:}
        -:  275:
        -:  276:
      345:  277:void Landscape::activateTrapIfEnemy(Road* road)
        -:  278:{
      345:  279:        DefBuild* mtrap = road->getMTrap();
      345:  280:        if (road->getEnemy() && mtrap) {
      153:  281:                attack(mtrap);
        -:  282:        }
      345:  283:}
        -:  284:
        -:  285:
      620:  286:void Landscape::dealDamage(Enemy* enemy, BuildAttack* battack)
        -:  287:{
      620:  288:        int damage = enemy->damageTaken(battack->getDamage());
      620:  289:        enemy->setHealth(enemy->getHealth() - damage);
        -:  290:
      620:  291:        if (!enemy->isAlive())
       49:  292:                return;
        -:  293:
      571:  294:        if (battack->getEffect()) {
      404:  295:                enemy->applyEffect(battack->getEffect());
      404:  296:                battack->setEffectNoMemory(nullptr);
        -:  297:                // effect pointer should be handled (used or deleted) in Ememy::applyEffect()
        -:  298:                // to avoid memory leaks set here battack->effect to nullptr without deleting precious one
        -:  299:        }
        -:  300:}
        -:  301:
        -:  302:
       60:  303:void Landscape::killEnemy(Enemy* enemy)
        -:  304:{
       60:  305:        Castle* cstl = std::get<0>(castle);
       60:  306:        if (isCastleReached(enemy)) {
    #####:  307:                if (enemy->getHealth() > 0)
    #####:  308:                cstl->setHealth(cstl->getCurrentHealth() - cstl->damageTaken(enemy->attack()));
        -:  309:
        -:  310:        } else {
       60:  311:                cstl->addGold(enemy->getGold());
        -:  312:        }
        -:  313:
       60:  314:        Road* curr_road = getRoad(enemy);
       60:  315:        if (curr_road) {
       60:  316:                curr_road->setEnemy(nullptr);
        -:  317:        }
        -:  318:
       60:  319:        delete enemy;
       60:  320:}
        -:  321:
     1290:  322:bool Landscape::isCastleReached(Enemy* enemy) const
        -:  323:{
     1290:  324:        Road* road = getRoad(enemy);
     1290:  325:        int x_enemy = road->getX(), y_enemy = road->getY();
     1290:  326:        int x_castle = std::get<1>(castle), y_castle = std::get<2>(castle);
        -:  327:
     1290:  328:        return calculateDistance(x_enemy, y_enemy, x_castle, y_castle) == 1;
        -:  329:}
        -:  330:
        -:  331:
      113:  332:void Landscape::processBuildsReadiness()
        -:  333:{
     5650:  334:        for (Field* field : fields) {
     5537:  335:                DefBuild* defbuild = field->getBuild();
     5537:  336:                if (defbuild && !defbuild->isReady()) {
      687:  337:                        defbuild->advanceReadiness();
        -:  338:                }
        -:  339:        }
      113:  340:}
        -:  341:
        -:  342:
     1793:  343:void Landscape::attack(DefBuild* defbuild)
        -:  344:{
     1793:  345:        if (!defbuild->isReady())
      396:  346:                return;
        -:  347:
     1397:  348:        Enemy* enemy = attack_strategy(defbuild);
     1397:  349:        if (!enemy)
      777:  350:                return;
        -:  351:
      620:  352:        BuildAttack* battack = defbuild->attack();
        -:  353:
      620:  354:        dealDamage(enemy, battack);
      620:  355:        delete battack;
        -:  356:
      620:  357:        defbuild->setUnready();
        -:  358:
      620:  359:        defbuild->onAttackComplete(this);
        -:  360:}
        -:  361:
        -:  362:
     1397:  363:Enemy* Landscape::attack_strategy(DefBuild* defbuild) const
        -:  364:{
        -:  365:        Enemy* enemy;
     1397:  366:        switch (defbuild->getStrategy()) {
      140:  367:        case AttackStrategy::NearestToTower:
      140:  368:                enemy = attack_nearest_to_tower(defbuild);
      140:  369:                break;
      428:  370:        case AttackStrategy::FurthestFromTower:
      428:  371:                enemy = attack_furthest_from_tower(defbuild);
      428:  372:                break;
       73:  373:        case AttackStrategy::NearestToCastle:
       73:  374:                enemy = attack_nearest_to_castle(defbuild);
       73:  375:                break;
      588:  376:        case AttackStrategy::LowestHP:
      588:  377:                enemy = attack_lowest_hp(defbuild);
      588:  378:                break;
      168:  379:        case AttackStrategy::HighestHP:
      168:  380:                enemy = attack_highest_hp(defbuild);
      168:  381:                break;
        -:  382:        }
     1397:  383:        return enemy;
        -:  384:}
        -:  385:
        -:  386:
     6828:  387:float Landscape::calculateDistance(int x1, int y1, int x2, int y2)
     6828:  388:        { return std::sqrt(std::pow(x1 - x2, 2) + std::pow(y1 - y2, 2)); }
        -:  389:
        -:  390:
      140:  391:Enemy* Landscape::attack_nearest_to_tower(DefBuild* defbuild) const
        -:  392:{
      140:  393:        std::pair<int, int> coords = defbuild->getCoord(this);
      140:  394:        int x_curr = coords.first, y_curr = coords.second;
        -:  395:
      140:  396:        Enemy* target_enemy1 = nullptr;
      140:  397:        Enemy* target_enemy2 = nullptr;
      140:  398:        float min_dist1 = std::numeric_limits<float>::infinity();
      140:  399:        float min_dist2 = std::numeric_limits<float>::infinity();
        -:  400:
     3920:  401:        for (Road* road : roads) {
     3780:  402:                Enemy* eee = road->getEnemy();
     3780:  403:                if (!eee || !eee->isAlive())
     3382:  404:                        continue;
        -:  405:
      398:  406:                int x_enemy = road->getX();
      398:  407:                int y_enemy = road->getY();
        -:  408:
      398:  409:                float dist = calculateDistance(x_curr, y_curr, x_enemy, y_enemy);
      398:  410:                if (dist < min_dist1) {
      290:  411:                        min_dist1 = dist;
      290:  412:                        if (dist <= defbuild->getRadius()) {
      184:  413:                                target_enemy1 = road->getEnemy();
        -:  414:                        }
        -:  415:                }
      398:  416:                if (dist < min_dist2 && !( road->getEnemy()->hasEffect(EffectType::POISON) )) {
      141:  417:                        min_dist2 = dist;
      141:  418:                        if (dist <= defbuild->getRadius()) {
       73:  419:                                target_enemy2 = road->getEnemy();
        -:  420:                        }
        -:  421:                }
        -:  422:        }
        -:  423:
      140:  424:        return target_enemy2 ? target_enemy2 : target_enemy1;
        -:  425:}
        -:  426:
        -:  427:
      428:  428:Enemy* Landscape::attack_furthest_from_tower(DefBuild* defbuild) const
        -:  429:{
      428:  430:        std::pair<int, int> coords = defbuild->getCoord(this);
      428:  431:        int x_curr = coords.first, y_curr = coords.second;
        -:  432:
        -:  433:        // enemy to attack according to the strategy
      428:  434:        Enemy* target_enemy1 = nullptr;
      428:  435:        float max_dist1 = -1.0;
        -:  436:
        -:  437:        // enemy to attack according to the strategy combined with no poison effect strategy
      428:  438:        Enemy* target_enemy2 = nullptr;
      428:  439:        float max_dist2 = -1.0;
        -:  440:
    11984:  441:        for (Road* road : roads) {
    11556:  442:                Enemy* eee = road->getEnemy();
    11556:  443:                if (!eee || !eee->isAlive())
    10403:  444:                        continue;
        -:  445:
     1153:  446:                int x_enemy = road->getX();
     1153:  447:                int y_enemy = road->getY();
        -:  448:
     1153:  449:                float dist = calculateDistance(x_curr, y_curr, x_enemy, y_enemy);
     1153:  450:                if (dist > max_dist1 && dist <= defbuild->getRadius()) {
      341:  451:                        max_dist1 = dist;
      341:  452:                        target_enemy1 = road->getEnemy();
        -:  453:                }
     1153:  454:                if (dist > max_dist2 && dist <= defbuild->getRadius() && !( road->getEnemy()->hasEffect(EffectType::POISON) )) {
      200:  455:                        max_dist2 = dist;
      200:  456:                        target_enemy2 = road->getEnemy();
        -:  457:                }
        -:  458:        }
        -:  459:
      428:  460:        return target_enemy2 ? target_enemy2 : target_enemy1;
        -:  461:}
        -:  462:
        -:  463:
       73:  464:Enemy* Landscape::attack_nearest_to_castle(DefBuild* defbuild) const
        -:  465:{
       73:  466:        int x_castle = std::get<1>(castle), y_castle = std::get<2>(castle);
       73:  467:        std::pair<int, int> coords = defbuild->getCoord(this);
       73:  468:        int x_dbuild = coords.first, y_dbuild = coords.second;
        -:  469:
       73:  470:        Enemy* target_enemy = nullptr;
       73:  471:        float min_dist = std::numeric_limits<float>::infinity();
     2044:  472:        for (Road* road : roads) {
     1971:  473:                Enemy* eee = road->getEnemy();
     1971:  474:                if (!eee || !eee->isAlive())
     1723:  475:                        continue;
        -:  476:
      248:  477:                int x_enemy = road->getX();
      248:  478:                int y_enemy = road->getY();
        -:  479:
      248:  480:                float dist_castle = calculateDistance(x_castle, y_castle, x_enemy, y_enemy);
      248:  481:                float dist_dbuild = calculateDistance(x_dbuild, y_dbuild, x_enemy, y_enemy);
        -:  482:
      248:  483:                if (dist_dbuild <= defbuild->getRadius() && dist_castle < min_dist) {
      143:  484:                        min_dist = dist_castle;
      143:  485:                        target_enemy = road->getEnemy();
        -:  486:                }
        -:  487:        }
        -:  488:
       73:  489:        return target_enemy;
        -:  490:}
        -:  491:
        -:  492:
      588:  493:Enemy* Landscape::attack_lowest_hp(DefBuild* defbuild) const
        -:  494:{
      588:  495:        std::pair<int, int> coords = defbuild->getCoord(this);
      588:  496:        int x_curr = coords.first, y_curr = coords.second;
        -:  497:
      588:  498:        Enemy* target_enemy1 = nullptr;
      588:  499:        Enemy* target_enemy2 = nullptr;
      588:  500:        float min_hp1 = std::numeric_limits<float>::infinity();
      588:  501:        float min_hp2 = std::numeric_limits<float>::infinity();
    16464:  502:        for (Road* road : roads) {
    15876:  503:                Enemy* eee = road->getEnemy();
    15876:  504:                if (!eee || !eee->isAlive())
    14343:  505:                        continue;
        -:  506:
     1533:  507:                int x_enemy = road->getX();
     1533:  508:                int y_enemy = road->getY();
     1533:  509:                float dist = calculateDistance(x_curr, y_curr, x_enemy, y_enemy);
        -:  510:
     1533:  511:                Enemy* enemy = road->getEnemy();
     1533:  512:                if (enemy->getHealth() < min_hp1 && dist <= defbuild->getRadius()) {
      266:  513:                        min_hp1 = enemy->getHealth();
      266:  514:                        target_enemy1 = enemy;
        -:  515:                }
     1533:  516:                if (enemy->getHealth() < min_hp2 && dist <= defbuild->getRadius() && enemy->hasEffect(EffectType::POISON)) {
      178:  517:                        min_hp2 = enemy->getHealth();
      178:  518:                        target_enemy2 = enemy;
        -:  519:                }
        -:  520:        }
        -:  521:
      588:  522:        return target_enemy2 ? target_enemy2 : target_enemy1;
        -:  523:}
        -:  524:
        -:  525:
      168:  526:Enemy* Landscape::attack_highest_hp(DefBuild* defbuild) const
        -:  527:{
      168:  528:        std::pair<int, int> coords = defbuild->getCoord(this);
      168:  529:        int x_curr = coords.first, y_curr = coords.second;
        -:  530:
      168:  531:        Enemy* target_enemy1 = nullptr;
      168:  532:        Enemy* target_enemy2 = nullptr;
      168:  533:        float max_hp1 = 0;
      168:  534:        float max_hp2 = 0;
     4704:  535:        for (Road* road : roads) {
     4536:  536:                Enemy* eee = road->getEnemy();
     4536:  537:                if (!eee || !eee->isAlive())
     4049:  538:                        continue;
        -:  539:
      487:  540:                int x_enemy = road->getX();
      487:  541:                int y_enemy = road->getY();
      487:  542:                float dist = calculateDistance(x_curr, y_curr, x_enemy, y_enemy);
        -:  543:
      487:  544:                Enemy* enemy = road->getEnemy();
      487:  545:                if (enemy->getHealth() > max_hp1 && dist <= defbuild->getRadius()) {
       82:  546:                        max_hp1 = enemy->getHealth();
       82:  547:                        target_enemy1 = enemy;
        -:  548:                }
      487:  549:                if (enemy->getHealth() > max_hp2 && dist <= defbuild->getRadius() && enemy->hasEffect(EffectType::POISON)) {
       54:  550:                        max_hp2 = enemy->getHealth();
       54:  551:                        target_enemy2 = enemy;
        -:  552:                }
        -:  553:        }
        -:  554:
      168:  555:        return target_enemy2 ? target_enemy2 : target_enemy1;
        -:  556:}
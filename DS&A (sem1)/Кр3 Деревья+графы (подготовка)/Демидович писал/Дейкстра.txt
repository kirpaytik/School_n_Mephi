typedef struct Graph{
    int size;
    int** matrix;
}

int shortestpath(Graph* graph, int from, int to, list* result){
    int* paths = malloc(graph->size * sizeof(int));
    int* colors = malloc(graph->size * sizeof(int));
    for (int i = 0; i<graph->size; i++){
        if (i == from){
            paths[i] = 0;
            colors[i] = 1;
        }
        else{
            paths[i] = INT_MAX;
            colors[i] = 0;
        }
    }
    int min = 1000000000;
    count = 0;
    while (count < graph->size){
        for (int i = 0; i<graph->size; i++){
            if (graph->matrix[from][i] > 0){
                if (paths[i] > graph->matrix[from][i] + paths[from]){
                    paths[i] = graph->matrix[from][i] + paths[from];
                }
            }
        }
        for (int i = 0; i<graph->size; i++){
            if (paths[i] < min && colors[i] == 0){
                min = paths[i];
                from = i;
            }
        }
        colors[ind] = 1;
        count++;
    }
}